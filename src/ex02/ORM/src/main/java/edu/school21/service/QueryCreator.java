package edu.school21.service;

import edu.school21.annotations.OrmColumn;
import edu.school21.annotations.OrmColumnId;
import edu.school21.annotations.OrmEntity;

import java.lang.reflect.Field;

public class QueryCreator {

    public static String findByIdQuery(Long id, Class<?> aClass) {
        OrmEntity ormEntity = aClass.getAnnotation(OrmEntity.class);
        return "SELECT * FROM " + ormEntity.table() + " WHERE id = " + id;
    }

    public static String dropTableQuery(Class<?> aClass) {
        OrmEntity ormEntity = aClass.getAnnotation(OrmEntity.class);
        return "DROP TABLE IF EXISTS " + ormEntity.table();
    }

    public static String createTableQuery(Class<?> aClass) {
        OrmEntity ormEntity = aClass.getAnnotation(OrmEntity.class);
        StringBuilder query = new StringBuilder("CREATE TABLE IF NOT EXISTS " + ormEntity.table() + " (");
        for (Field field : aClass.getDeclaredFields()) {
            if (field.isAnnotationPresent(OrmColumn.class)) {
                OrmColumn ormColumn = field.getAnnotation(OrmColumn.class);
                String fieldType = getSqlType(field.getType().getSimpleName(), ormColumn);
                query.append(getColumnName(field)).append(" ").append(fieldType).append(", ");
            }
            if (field.isAnnotationPresent(OrmColumnId.class)) {
                query.append("id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY, ");
            }
        }
        query.delete(query.length() - 2, query.length());
        query.append(")");
        return query.toString();
    }


    public static String saveQuery(Object entity) throws IllegalAccessException {
        OrmEntity ormEntity = entity.getClass().getAnnotation(OrmEntity.class);
        StringBuilder query = new StringBuilder("INSERT INTO " + ormEntity.table() + " (");
        StringBuilder values = new StringBuilder("VALUES (");
        for (Field field : entity.getClass().getDeclaredFields()) {
            if (field.isAnnotationPresent(OrmColumn.class)) {
                field.setAccessible(true);
                query.append(getColumnName(field) + ", ");
                values.append(getFieldValue(field, entity) + ", ");
            }
        }
        query.delete(query.length() - 2, query.length());
        query.append(") ");
        values.delete(values.length() - 2, values.length());
        query.append(values + ")");
        return query.toString();
    }


    public static String updateQuery(Object entity) throws IllegalAccessException {
        OrmEntity ormEntity = entity.getClass().getAnnotation(OrmEntity.class);
        StringBuilder query = new StringBuilder("UPDATE " + ormEntity.table() + " SET ");
        StringBuilder where = new StringBuilder(" WHERE id = ");
        for (Field field : entity.getClass().getDeclaredFields()) {
            if (field.isAnnotationPresent(OrmColumn.class)) {
                field.setAccessible(true);
                query.append(getColumnName(field) + " = ");
                query.append(getFieldValue(field, entity) + ", ");
            }
            if (field.isAnnotationPresent(OrmColumnId.class)) {
                field.setAccessible(true);
                where.append(getFieldValue(field, entity));
            }
        }
        query.delete(query.length() - 2, query.length());
        query.append(where);
        return query.toString();
    }

    private static String getSqlType(String type, OrmColumn ormColumn) {
        switch (type) {
            case "String":
                return "VARCHAR(" + ormColumn.length() + ") NOT NULL";
            case "Integer":
                return "INTEGER";
            case "Double":
                return "DOUBLE";
            case "Boolean":
                return "BOOLEAN";
            case "Long":
                return "BIGINT";
            default:
                return "";
        }
    }

    private static String getFieldValue(Field field, Object entity) throws IllegalAccessException {
        if (field.getType().getSimpleName().equals("String")) {
            return ("\'" + field.get(entity) + "\'");
        } else {
            return (field.get(entity).toString());
        }
    }

    private static String getColumnName(Field field) {
        OrmColumn ormColumn = field.getAnnotation(OrmColumn.class);
        return ormColumn.name();
    }


}
